{
  "CRUD MONGO": {
    "prefix": "crudmongocontroller",
    "scope": "javascript,typescript",
    "body": [
      "import { NextFunction, Request, Response } from 'express';",
      "import { ${1:ModelName}Model, I${1:ModelName} } from '../models/${3:VariableName}.model';",
      "import mongoose from 'mongoose';",
      "",
      "export const create${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
      "  const { ${2:Fields} }:I${1:ModelName} = req.body;",
      "",
      "  const ${3:VariableName} = new ${1:ModelName}Model({",
      "    _id: new mongoose.Types.ObjectId(),",
      "    ${2:Fields},",
      "  });",
      "",
      "  return ${3:VariableName}",
      "    .save()",
      "    .then((${3:VariableName}) => res.status(201).json({ ${3:VariableName} }))",
      "    .catch((error) => res.status(500).json({ error }));",
      "};",
      "",
      "export const get${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
      "  const ${3:VariableName}Id = req.params.${3:VariableName}Id;",
      "",
      "  return ${1:ModelName}Model.findById(${3:VariableName}Id)",
      "    .then((${3:VariableName}) =>",
      "      ${3:VariableName} ? res.status(200).json({ ${3:VariableName} }) : res.status(404).json({ message: 'Not Found' })",
      "    )",
      "    .catch((error) => res.status(500).json({ error }));",
      "};",
      "",
      "export const getAll${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
      "  return ${1:ModelName}Model.find()",
      "    .then((${3:VariableName}s) => res.status(200).json({ ${3:VariableName}s }))",
      "    .catch((error) => res.status(500).json({ error }));",
      "};",
      "",
      "export const update${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
      "  const ${3:VariableName}Id = req.params.${3:VariableName}Id;",
      "",
      "  return ${1:ModelName}Model.findById(${3:VariableName}Id)",
      "    .then((${3:VariableName}) => {",
      "      if (!${3:VariableName}) return res.status(404).json({ message: 'Not Found' });",
      "",
      "      ${3:VariableName}.set(req.body);",
      "      return ${3:VariableName}",
      "        .save()",
      "        .then((${3:VariableName}) => res.status(201).json({ ${3:VariableName} }))",
      "        .catch((error) => res.status(500).json({ error }));",
      "    })",
      "    .catch((error) => res.status(500).json({ error }));",
      "};",
      "",
      "export const delete${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
      "  const ${3:VariableName}Id = req.params.${3:VariableName}Id;",
      "",
      "  return ${1:ModelName}Model.findByIdAndDelete(${3:VariableName}Id)",
      "    .then((${3:VariableName}) =>",
      "      ${3:VariableName}",
      "        ? res.status(201).json({ message: 'Deleted' })",
      "        : res.status(404).json({ message: 'Not Found' })",
      "    )",
      "    .catch((error) => res.status(500).json({ error }));",
      "};"
    ]
  },
  "CRUD MONGO Router": {
    "prefix": "crudmongorouter",
    "scope": "javascript,typescript",
    "body": [
      "import { Router } from 'express';",
      "import { create${1:ModelName}, delete${1:ModelName}, getAll${1:ModelName}, get${1:ModelName}, update${1:ModelName}, } from '../../controllers/${2:VariableName}.controller';",
      "",
      "const app: Router = Router();",
      "",
      "app.post('/create', create${1:ModelName});",
      "app.get('/get', getAll${1:ModelName});",
      "app.get('/get/:${2:VariableName}Id', get${1:ModelName});",
      "app.patch('/update/:${2:VariableName}Id', update${1:ModelName});",
      "app.delete('/delete/:${2:VariableName}Id', delete${1:ModelName});",
      "",
      "export const ${2:VariableName}Router = app;"
    ]
  }
}
